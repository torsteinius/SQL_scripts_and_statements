USE [DM_SAP]
GO

/****** Object:  StoredProcedure [trans].[SCD_type2_under_utvikling]    Script Date: 31.10.2022 11:35:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [trans].[SCD_type2_under_utvikling]
    @from_table varchar(40),
    @to_table varchar(40),
    @key varchar(50)
 
-- =============================================
-- Author:                Torstein Lunde
-- Create date:           01.05.2019
-- Changed for SCDType2:  01.11.2022
-- =============================================
 
AS
    declare @cols_a varchar(max);
    declare @cols_b varchar(max);
    declare @cols_c varchar(max);
    declare @update_cols varchar(max);
    declare @select_changes_str nvarchar(max);
    declare @select_new_str nvarchar(max);
	declare @select_update_str nvarchar(max);
    declare @compare_stmt nvarchar(max);
    declare @update_str nvarchar(max);
    declare @insert_str nvarchar(max);
 
    --Log the event
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('SCD_type2 on ' + @to_table + ': Start'
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type1'
           ,'SCD_type1'
           ,-1)
 
    ---------------------------------------------------------------------------
    --Find columns from input table
    select @cols_a =stuff((SELECT  ', a."' + c1.name + '"' FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
    FROM sys.columns c
    WHERE c.object_id = OBJECT_ID(@from_table)
 
    select @cols_b =stuff((SELECT  ', b."' + c1.name + '"' FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
    FROM sys.columns c
    WHERE c.object_id = OBJECT_ID(@from_table)
 
    select @cols_c = stuff((
                SELECT  
                    CASE 
                        WHEN upper(right(c1.name,4)) = 'CODE' and t.Name = 'VARCHAR' THEN ', upper(rtrim(ltrim(a."' + c1.name + '"))) "' + c1.name + '" '
                        WHEN upper(right(c1.name,4)) <> 'CODE' and t.Name = 'VARCHAR' THEN ', rtrim(ltrim(a."' + c1.name + '")) "' + c1.name + '" '
                        ELSE ', a."' + c1.name + '"'
                    END
                FROM sys.columns c1 
                    INNER JOIN sys.types t ON c1.user_type_id = t.user_type_id    
                WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
    FROM sys.columns c     
	WHERE c.object_id = OBJECT_ID(@from_table)
 
    --Create compare statement
    SELECT @compare_stmt =stuff((SELECT  ' AND (a."' + c1.name + '" IS NULL OR a."' + c1.name + '" = b."' + c1.name + '") '  FROM sys.columns c1 
    WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
    FROM sys.columns c
    WHERE c.object_id = OBJECT_ID(@from_table)
 
    set @compare_stmt = right(@compare_stmt, len(@compare_stmt) - 3); 

    ---------------------------------------------
	--Log columns
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Columns: ' + @cols_a + ''
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
	
	--------------------------------------------------
    --Select from source left join with destination
    set @select_changes_str = 'SELECT ' + @cols_c + 
                        ' FROM ' + @from_table + ' AS a WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE ' + @compare_stmt + ')';

    

	---------------------------------------------------------------------------------------------------------------------
    ------------------------UPDATE-----------------------------------------------------------------------
	
	--SCD 2 update statement; change active to -1 first for rows that will be updated
    set @update_str = 'UPDATE a SET active = -1, a.DW_UpdateDate = getdate()' + 
                        ' FROM ' +  @to_table + ' AS a INNER JOIN (' + @select_changes_str + ') as b ON a.' + @key + ' = b.' + @key; 

	exec sp_executesql @update_str
	

	-- Insert new row for updated dimention values, set the rows as active
	
	--Select from source left join with destination
    set @select_update_str = 'SELECT ' + @cols_c + ',  getdate() as DW_UpdateDate,  ''1900-01-01'' as [DW_InsertDate], 1 as [DW_CurrentFlag]' +
                          ' FROM ' + @from_table + ' AS a   WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE a.' + @key + ' = b.' + @key + ')';

	--Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Select update: ' + @select_update_str
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
    
	-- Insert new SCD type 2 row
    set @insert_str = 'INSERT INTO ' + @to_table + ' ( ' + @cols_a + ', DW_UpdateDate, DW_InsertDate, DW_CurrentFlag ) ' +
                        @select_update_str

	exec sp_executesql @insert_str

	-- Update status for old rows to not active from status -1
	set @update_str = 'UPDATE ' + @to_table + ' SET DW_CurrentFlag = 0, DW_UpdateDate = Now()  WHERE DW_CurrentFlag = -1'

	exec sp_executesql @update_str

	---------------------------------------------------------------------------------------------------------------------
    ------------------------ INSERT -----------------------------------------------------------------------
    --Select from source left join with destination
    set @select_new_str = 'SELECT ' + @cols_c + ',  getdate() as DW_UpdateDate,  getdate() as [DW_InsertDate], 1 as [DW_CurrentFlag]' +
                          ' FROM ' + @from_table + ' AS a   WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE a.' + @key + ' = b.' + @key + ')';

	
	--Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Insert: ' + @insert_str
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
 
 
    --Insert new rows
    exec sp_executesql @insert_str
 

	---------------------------------------------------------------------------------------------------------------------
    ------------------------ DELETE -----------------------------------------------------------------------
    --Select from source left join with destination
    set @select_new_str = 'SELECT ' + @cols_c + ',  getdate() as DW_UpdateDate,  getdate() as [DW_InsertDate], 1 as [DW_CurrentFlag]' +
                          ' FROM ' + @from_table + ' AS a   WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE a.' + @key + ' = b.' + @key + ')';








	---------------------------------------------------------------------------------------------------------------------



--set @update_str = 'UPDATE a SET ' + @update_cols + ', a.DW_UpdateDate = getdate()' + 
--                        ' FROM ' +  @to_table + ' AS a INNER JOIN (' + @select_changes_str + ') as b ON a.' + @key + ' = b.' + @key; 
 

    --Update columns
--    select @update_cols =stuff((SELECT  ', a."' + c1.name + '" = b."' + c1.name  + '"' FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
--    FROM sys.columns c
--    WHERE c.object_id = OBJECT_ID(@from_table)
 
    --Create compare statement
    SELECT @compare_stmt =stuff((SELECT  ' AND (a."' + c1.name + '" IS NULL OR a."' + c1.name + '" = b."' + c1.name + '") '  FROM sys.columns c1 
    WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
    FROM sys.columns c
    WHERE c.object_id = OBJECT_ID(@from_table)
 
    set @compare_stmt = right(@compare_stmt, len(@compare_stmt) - 3); 
 
    --Select from source left join with destination
    set @select_new_str = 'SELECT ' + @cols_c + ',  getdate() as DW_UpdateDate,  getdate() as [DW_InsertDate], 1 as [DW_CurrentFlag]' +
                          ' FROM ' + @from_table + ' AS a   WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE a.' + @key + ' = b.' + @key + ')';
 
    --Create update statement; SCD type 2, only update SCD-fields, and insert new row 
--    set @update_str = 'UPDATE a SET ' + @update_cols + ', a.DW_UpdateDate = getdate()' + 
--                        ' FROM ' +  @to_table + ' AS a INNER JOIN (' + @select_changes_str + ') as b ON a.' + @key + ' = b.' + @key; 
 
 
    --Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Update: ' + @update_str
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
 
 
    --Update changes
    exec sp_executesql @update_str
 
 
    --Create insert statement
    set @insert_str = 'INSERT INTO ' + @to_table + ' ( ' + @cols_a + ', DW_UpdateDate, DW_InsertDate, DW_CurrentFlag ) ' +
                        @select_new_str
     
    --Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Insert: ' + @insert_str
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
 
 
    --Insert new rows
    exec sp_executesql @insert_str
 
    --Log the event
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('SCD_type2 on ' + @to_table + ': End'
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
 
RETURN 0
GO


