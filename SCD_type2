USE [DM_SAP]
GO
/****** Object:  StoredProcedure [trans].[SCD_type2]    Script Date: 01.11.2022 13:23:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [trans].[SCD_type2]
    @from_table varchar(40),
    @to_table varchar(40),
    @key varchar(50)
 
-- =============================================
-- Author:                Torstein Lunde
-- Create date:           01.05.2019
-- Changed for SCDType2:  01.11.2022
-- =============================================
 
AS
    declare @cols_a varchar(max);
    declare @cols_b varchar(max);
    declare @cols_c varchar(max);
    declare @update_cols varchar(max);
    declare @select_changes_str nvarchar(max);
    declare @select_new_str nvarchar(max);
	declare @select_update_insert_str nvarchar(max);
	declare @select_update_str nvarchar(max);
    declare @compare_stmt nvarchar(max);
    declare @update_str nvarchar(3450);
    declare @insert_str nvarchar(3450);
 
    --Log the event
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('SCD_type2 on ' + @to_table + ': Start'
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
 
    ---------------------------------------------------------------------------
    --Find columns from input table,columns named ID are ignored
    select @cols_a =stuff((SELECT 
								CASE 
									WHEN NOT (upper(c1.name) = 'ID') THEN ', a."' + c1.name + '"' 
									WHEN upper(c1.name) = 'ID' THEN ''
									ELSE ''
								END
							FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
		FROM sys.columns c
		WHERE c.object_id = OBJECT_ID(@from_table)
 
    SELECT @cols_b =stuff((SELECT 
								CASE 
									WHEN NOT (upper(c1.name) = 'ID') THEN ', b."' + c1.name + '"' 
									WHEN upper(c1.name) = 'ID' THEN ''
									ELSE ''
								END
							FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
		FROM sys.columns c
		WHERE c.object_id = OBJECT_ID(@from_table)
 
    SELECT @cols_c = stuff((
                SELECT  
                    CASE 
                        WHEN NOT (upper(c1.name) = 'ID' and t.Name = 'INT') THEN ', rtrim(ltrim(a."' + c1.name + '")) "' + c1.name + '" '
						WHEN upper(c1.name) = 'ID' and t.Name = 'INT' THEN ''
                       -- WHEN upper(right(c1.name,4)) = 'CODE' and t.Name = 'VARCHAR' THEN ', upper(rtrim(ltrim(a."' + c1.name + '"))) "' + c1.name + '" '
                       -- WHEN upper(right(c1.name,4)) <> 'CODE' and t.Name = 'VARCHAR' THEN ', rtrim(ltrim(a."' + c1.name + '")) "' + c1.name + '" '
                        ELSE ', a."' + c1.name + '"'
                    END
                FROM sys.columns c1 
                    INNER JOIN sys.types t ON c1.user_type_id = t.user_type_id    
                WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
    FROM sys.columns c     
	WHERE c.object_id = OBJECT_ID(@from_table)
 
    --Create compare statement
    SELECT @compare_stmt =stuff((SELECT  CASE 
											WHEN NOT (upper(c1.name) = 'ID') THEN ' AND ((a."' + c1.name + '" IS NULL AND b."' + c1.name + '" IS NULL) OR a."' + c1.name + '" = b."' + c1.name + '") '  
											WHEN upper(c1.name) = 'ID' THEN ''
											ELSE ''
										END 
										FROM sys.columns c1
										WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
		FROM sys.columns c
		WHERE c.object_id = OBJECT_ID(@from_table)
 
    SET @compare_stmt = right(@compare_stmt, len(@compare_stmt) - 3); 

    ---------------------------------------------
	--Log columns
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Columns: ' + @cols_a + ''
           ,'Store procedure'
           ,getdate()
           ,1
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
	
	--------------------------------------------------
    --Select from source left join with destination, not equal (change) or not present (new)
    set @select_changes_str = 'SELECT ' + @key + 
                        ' FROM ' + @to_table + ' AS a WHERE a.[DW_CurrentFlag] = 1 AND NOT EXISTS ( SELECT 1 FROM ' + @from_table + ' AS b WHERE ' + @compare_stmt + ')';

    

	---------------------------------------------------------------------------------------------------------------------
    ------------------------UPDATE and DELETE; Set ToDate and Active = -1 -----------------------------------------------
	--SCD 2 update statement; change active to -1 first for rows that will be updated
    set @update_str = 'UPDATE a SET DW_CurrentFlag = -1, DW_UpdateDate = getdate(), DW_ToDate = getdate() ' + 
                        ' FROM ' +  @to_table + ' AS a INNER JOIN (' + @select_changes_str + ') as b ON a.' + @key + ' = b.' + @key + 
						' WHERE a.[DW_CurrentFlag] = 1'; 

	--Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message], [RunMachine], [LogTime], [Error], [TaskName], [PackageName], [VersionBuild])
    VALUES
           ('Update statement: ' + @update_str + ' '
           ,'Store procedure' ,getdate() ,3 ,'SCD_type2' ,'SCD_type2' ,-1)

	exec sp_executesql @update_str
	

    

    ---------------------------------------------------------------------------------------------------------------------
    ------------------------UPDATE and INSERT NEW; Insert new row, with FromDate-----------------------------------------
	-- Insert new row for updated dimention values, set the rows as active
	
	--Select from source left join with destination
    set @select_update_insert_str = 'SELECT ' + @cols_c + ',  getdate() as DW_FromDate, NULL as DW_ToDate,  getdate() as DW_UpdateDate,  getdate() as [DW_InsertDate], 1 as [DW_CurrentFlag] ' +
                          ' FROM ' + @from_table + ' AS a WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE ' + @compare_stmt + ' AND b.DW_CurrentFlag = 1)';

	--Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message] ,[RunMachine] ,[LogTime] ,[Error] ,[TaskName] ,[PackageName] ,[VersionBuild])
    VALUES
           ('Select update: ' + @select_update_insert_str + ' ' , 
		    'Store procedure' , getdate() , 5 , 'SCD_type2' , 'SCD_type2' , -1)
    
	-- Insert new SCD type 2 row
    set @insert_str = 'INSERT INTO ' + @to_table + ' ( ' + @cols_a + ', DW_FromDate, DW_ToDate, DW_UpdateDate, DW_InsertDate, DW_CurrentFlag ) ' +
                        @select_update_insert_str
   -- set @insert_str =  'SET IDENTITY_INSERT ' + @to_table + ' ON ' + 
   --	                   @insert_str +
   --					   'SET IDENTITY_INSERT ' + @to_table + ' OFF '

    --Log the event
    INSERT INTO [operation].[Log]
           ([Message] ,[RunMachine] ,[LogTime] ,[Error] ,[TaskName] ,[PackageName] ,[VersionBuild])
    VALUES
           (@insert_str + ''
           ,'Store procedure'
           ,getdate()
           ,99
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)

    exec sp_executesql @insert_str



	-- Update InsertDate to changed rows from last active row
	set @update_str = ' UPDATE a SET a.DW_InsertDate = b.DW_InsertDate FROM ' + @to_table + ' AS a INNER JOIN (SELECT DW_InsertDate, ' + @key + ' FROM ' + @to_table + ' WHERE DW_CurrentFlag = -1) b ON a.' + @key + ' = ' + ' b.' + @key + ' ' 
	--Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message] ,[RunMachine] ,[LogTime] ,[Error] ,[TaskName] ,[PackageName] ,[VersionBuild])
    VALUES
           ('Update: ' + @update_str + ' ' , 
		    'Store procedure' , getdate() , 11 , 'SCD_type2' , 'SCD_type2' , -1)
    
	exec sp_executesql @update_str

    
    -- Update status for old rows to not active from status -1
	set @update_str = ' UPDATE ' + @to_table + ' SET DW_CurrentFlag = 0, DW_UpdateDate = getdate()  WHERE DW_CurrentFlag = -1'
	--Log dynamic SQL
    INSERT INTO [operation].[Log]
           ([Message] ,[RunMachine] ,[LogTime] ,[Error] ,[TaskName] ,[PackageName] ,[VersionBuild])
    VALUES
           ('Update: ' + @update_str + ' ' , 
		    'Store procedure' , getdate() , 13 , 'SCD_type2' , 'SCD_type2' , -1)
    
	exec sp_executesql @update_str

	---------------------------------------------------------------------------------------------------------------------

    --Log the event
    INSERT INTO [operation].[Log]
           ([Message]
           ,[RunMachine]
           ,[LogTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('SCD_type2 on ' + @to_table + ': End'
           ,'Store procedure'
           ,getdate()
           ,99
           ,'SCD_type2'
           ,'SCD_type2'
           ,-1)
 
RETURN 0
