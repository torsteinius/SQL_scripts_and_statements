Create PROCEDURE trans.SCD_type1
	@from_table varchar(40),
	@to_table varchar(40),
	@key varchar(50)

-- =============================================
-- Author:		Torstein Lunde
-- Create date: 01.05.2019
-- =============================================

AS
	declare @cols_a varchar(max);
    declare @cols_b varchar(max);
	declare @cols_c varchar(max);
	declare @update_cols varchar(max);
    declare @select_changes_str nvarchar(max);
	declare @select_new_str nvarchar(max);
	declare @compare_stmt nvarchar(max);
	declare @update_str nvarchar(max);
	declare @insert_str nvarchar(max);

	--Logg the event
	INSERT INTO [operation].[Logg]
           ([Message]
           ,[RunMachine]
           ,[LoggTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('SCD_type1 on ' + @to_table + ': Start'
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type1'
           ,'SCD_type1'
           ,-1)


	--Find columns from input table
	select @cols_a =stuff((SELECT  ', a."' + c1.name + '"' FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
	FROM sys.columns c
	WHERE c.object_id = OBJECT_ID(@from_table)

	select @cols_b =stuff((SELECT  ', b."' + c1.name + '"' FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
	FROM sys.columns c
	WHERE c.object_id = OBJECT_ID(@from_table)

	select @cols_c = stuff((
				SELECT  
					CASE 
						WHEN upper(right(c1.name,4)) = 'CODE' and t.Name = 'VARCHAR' THEN ', upper(rtrim(ltrim(a."' + c1.name + '"))) "' + c1.name + '" '
						WHEN upper(right(c1.name,4)) <> 'CODE' and t.Name = 'VARCHAR' THEN ', rtrim(ltrim(a."' + c1.name + '")) "' + c1.name + '" '
						ELSE ', a."' + c1.name + '"'
					END
				FROM sys.columns c1 
				    INNER JOIN sys.types t ON c1.user_type_id = t.user_type_id	
				WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
	FROM sys.columns c	
	WHERE c.object_id = OBJECT_ID(@from_table)


	--Update columns
	select @update_cols =stuff((SELECT  ', a."' + c1.name + '" = b."' + c1.name  + '"' FROM sys.columns c1 where c.object_id=c1.object_id for xml path('')),1,1,'')
	FROM sys.columns c
	WHERE c.object_id = OBJECT_ID(@from_table)

	--Create compare statement
	SELECT @compare_stmt =stuff((SELECT  ' AND (a."' + c1.name + '" IS NULL OR a."' + c1.name + '" = b."' + c1.name + '") '  FROM sys.columns c1 
	WHERE c.object_id=c1.object_id for xml path('')),1,1,'')
	FROM sys.columns c
	WHERE c.object_id = OBJECT_ID(@from_table)

	set @compare_stmt = right(@compare_stmt, len(@compare_stmt) - 3);

	--Select from source left join with destination
	set @select_changes_str = 'SELECT ' + @cols_c + 
						' FROM ' + @from_table + ' AS a WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE ' + @compare_stmt + ')';

	--Select from source left join with destination
	set @select_new_str = 'SELECT ' + @cols_c + ',  getdate() as DW_UpdateDate,  getdate() as [DW_InsertDate], 1 as [DW_CurrentFlag]' +
						  ' FROM ' + @from_table + ' AS a   WHERE NOT EXISTS ( SELECT 1 FROM ' + @to_table + ' AS b WHERE a.' + @key + ' = b.' + @key + ')';

	--Create update statement
	set @update_str = 'UPDATE a SET ' + @update_cols + ', a.DW_UpdateDate = getdate()' + 
						' FROM ' +  @to_table + ' AS a INNER JOIN (' + @select_changes_str + ') as b ON a.' + @key + ' = b.' + @key; 


	--Logg dynamic SQL
	INSERT INTO [operation].[Logg]
           ([Message]
           ,[RunMachine]
           ,[LoggTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Update: ' + @update_str
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type1'
           ,'SCD_type1'
           ,-1)


	--Update changes
	exec sp_executesql @update_str


	--Create insert statement
	set @insert_str = 'INSERT INTO ' + @to_table + ' ( ' + @cols_a + ', DW_UpdateDate, DW_InsertDate, DW_CurrentFlag ) ' +
						@select_new_str
	
	--Logg dynamic SQL
	INSERT INTO [operation].[Logg]
           ([Message]
           ,[RunMachine]
           ,[LoggTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('Insert: ' + @insert_str
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type1'
           ,'SCD_type1'
           ,-1)


	--Insert new rows
	exec sp_executesql @insert_str

	--Logg the event
	INSERT INTO [operation].[Logg]
           ([Message]
           ,[RunMachine]
           ,[LoggTime]
           ,[Error]
           ,[TaskName]
           ,[PackageName]
           ,[VersionBuild])
     VALUES
           ('SCD_type1 on ' + @to_table + ': End'
           ,'Store procedure'
           ,getdate()
           ,0
           ,'SCD_type1'
           ,'SCD_type1'
           ,-1)

RETURN 0
